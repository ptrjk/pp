
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <pthread.h>

#define NUM_THREADS  3
#define TCOUNT 10
#define COUNT_LIMIT 12

uint32_t count = 0;

pthread_mutex_t count_mutex;
pthread_cond_t count_threshold_cv;

void *inc_count(void *thread_id) {
  
	uint32_t poc;

	for (poc = 0; poc < TCOUNT; poc++) {
    
		pthread_mutex_lock(&count_mutex);
		count++;

    	if (count == COUNT_LIMIT) {
    		
			printf("inc_count(): thread %d, count = %d  Threshold reached.", (uint32_t)thread_id, count);
      
			pthread_cond_signal(&count_threshold_cv);
			printf("Just sent signal.\n");
    	}
    
		printf("inc_count(): thread %d, count = %d, unlocking mutex\n", (uint32_t)thread_id, count);
		pthread_mutex_unlock(&count_mutex);

    	sleep(1);
    }
	
	pthread_exit(NULL);
}

void *watch_count(void *thread_id) {

	printf("Starting watch_count(): thread %d\n", (uint32_t)thread_id);

	pthread_mutex_lock(&count_mutex);

	while (count < COUNT_LIMIT) {
    	
		printf("watch_count(): thread %d Count= %d. Going into wait...\n", (uint32_t)thread_id, count);
    	
		pthread_cond_wait(&count_threshold_cv, &count_mutex);
    	
		printf("watch_count(): thread %d Condition signal received. Count= %d\n", (uint32_t)thread_id, count);
	}

	printf("watch_count(): thread %d Updating the value of count...\n", (uint32_t)thread_id);
  	
	count += 125;
  
  	printf("watch_count(): thread %d count now = %d.\n", (uint32_t)thread_id, count);
  	printf("watch_count(): thread %d Unlocking mutex.\n", (uint32_t)thread_id);
  
  	pthread_mutex_unlock(&count_mutex);
  	pthread_exit(NULL);
}

int main(int argc, char *argv[]) {

	pthread_t threads[3];

	pthread_mutex_init(&count_mutex, NULL);
  	pthread_cond_init (&count_threshold_cv, NULL);

	pthread_create(&threads[0], NULL, watch_count, (void *)1);
	pthread_create(&threads[1], NULL, inc_count, (void *)2);
	pthread_create(&threads[2], NULL, inc_count, (void *)3);

	pthread_join(threads[0], NULL);
	pthread_join(threads[1], NULL);
	pthread_join(threads[2], NULL);

	pthread_mutex_destroy(&count_mutex);
	pthread_cond_destroy(&count_threshold_cv);

	pthread_exit (NULL);
}

