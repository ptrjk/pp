
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <pthread.h>
#include <semaphore.h>

sem_t sem;

void *Trd0(void *ind) {
	
	int32_t sem_value;
	
	sem_wait(&sem);
	sem_getvalue(&sem, &sem_value);
	printf("Thread 0, semaphore value = %d\n", sem_value);
	sleep(2);
	printf("Thread 0 after 2s\n");
	
	pthread_exit(NULL);
}

void *Trd1(void *ind) {

	int32_t sem_value;

	sem_wait(&sem);
	sem_getvalue(&sem, &sem_value);
	printf("Thread 1, semaphore value = %d\n", sem_value);
	sleep(5);
	printf("Thread 1 after 5s\n");
//	sem_post(&sem);
	
	pthread_exit(NULL);
}

void *Trd2(void *ind) {

	int32_t sem_value;

	sem_wait(&sem);
	sem_getvalue(&sem, &sem_value);
	printf("Thread 2, semaphore value = %d\n", sem_value);
	sleep(8);
	printf("Thread 2 after 8s\n");
	
	pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
	
	pthread_t threads[3];
	
	sem_init(&sem, 0, 3);

	pthread_create(&threads[0], NULL, Trd0, (void *)0);
	pthread_create(&threads[1], NULL, Trd1, (void *)1);
	pthread_create(&threads[2], NULL, Trd2, (void *)2);
	
	pthread_join(threads[0], NULL);
	pthread_join(threads[1], NULL);
	pthread_join(threads[2], NULL);
	
	sem_destroy(&sem);
	
	printf("Finished, press enter");
	getchar();
	return 0;
	
}

